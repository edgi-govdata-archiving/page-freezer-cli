version: 2
jobs:
  build:
    docker:
      - image: circleci/node:12.13.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-2-{{ checksum "package-lock.json" }}
            - dependency-cache-2-
      - run:
          name: Dependencies
          command: npm ci
      - save_cache:
          key: dependency-cache-2-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: Build
          command: npm run build-production
      - run:
          name: Run linter
          command: npm run lint
      - run:
          name: Test
          command: npm test

  publish_docker:
    machine: true
    steps:
      - checkout
      - run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: |
          docker build -t envirodgi/ui:$CIRCLE_SHA1 .
          docker build -t envirodgi/ui:latest .
      - run: |
          docker push envirodgi/ui:$CIRCLE_SHA1
          docker push envirodgi/ui:latest

  compare_bundle_size:
    docker:
      - image: circleci/node:12.13.1
    steps:
      - run: sudo apt-get install bc
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-2-{{ checksum "package-lock.json" }}
            - dependency-cache-2-
      - run:
          name: Dependencies
          command: npm ci
      - save_cache:
          key: dependency-cache-2-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: Build Branch
          command: |
            npm run build-production
            wc -c < dist/bundle.js | tr -d ' ' > stats-raw-size.txt
            wc -c < dist/bundle.js.gz | tr -d ' ' > stats-compressed-size.txt
      - run:
          name: Build Master
          command: |
            # NOTE: on CircleCI, the local master branch seems to be the same
            # as the branch being tested. So always specify `origin/master`.
            git checkout origin/master
            npm ci
            npm run build-production
            wc -c < dist/bundle.js | tr -d ' ' > stats-master-raw-size.txt
            wc -c < dist/bundle.js.gz | tr -d ' ' > stats-master-compressed-size.txt
      - run:
          name: Compare Build Sizes
          command: |
            MASTER_RAW_SIZE="$(cat stats-master-raw-size.txt)"
            MASTER_COMPRESSED_SIZE="$(cat stats-master-compressed-size.txt)"
            RAW_SIZE="$(cat stats-raw-size.txt)"
            COMPRESSED_SIZE="$(cat stats-compressed-size.txt)"

            # Calculate % change
            CHANGE="$(echo "scale=1; 100 * (${RAW_SIZE} - ${MASTER_RAW_SIZE}) / ${MASTER_RAW_SIZE}" | bc)"
            CHANGE_COMPRESSED="$(echo "scale=1; 100 * (${COMPRESSED_SIZE} - ${MASTER_COMPRESSED_SIZE}) / ${MASTER_COMPRESSED_SIZE}" | bc)"

            echo "Current Release Size:"
            printf "  Bundle:     %7s bytes\n" "${MASTER_RAW_SIZE}"
            printf "  Compressed: %7s bytes\n" "${MASTER_COMPRESSED_SIZE}"
            echo "This Branch Size:"
            printf "  Bundle:     %7s bytes (%+d%%)\n" "${RAW_SIZE}" "${CHANGE}"
            printf "  Compressed: %7s bytes (%+d%%)\n" "${COMPRESSED_SIZE}" "${CHANGE_COMPRESSED}"

            # If we increased in size by a lot, fail the test.
            if [[ $CHANGE > 20 || $CHANGE_COMPRESSED > 20 ]]; then
              exit 1
            fi

workflows:
  version: 2
  build:
    jobs:
      - build:
          filters:
            branches:
              ignore: release
      - compare_bundle_size:
          filters:
            branches:
              ignore:
                - master
                - release

  build-and-publish:
    jobs:
      - build:
          filters:
            branches:
              only:
                - release
      - publish_docker:
          requires:
            - build
